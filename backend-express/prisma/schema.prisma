// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Type {
  id        Int         @id @default(autoincrement())
  nom       String
  carte     Carte[]
  condition Condition[]
}

model Classe {
  id        Int         @id @default(autoincrement())
  nom       String
  carte     Carte[]
  condition Condition[]
}

model Competence {
  id               Int                      @id @default(autoincrement())
  nom              String
  description      String
  type             String
  effet            String
  valeur           Int
  cartes           CartesCapacictesActive[]
  capacite_passive CapacitePassive[]
}

model CartesCapacictesActive {
  competence_id Int
  competence    Competence @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carte_id      Int
  carte         Carte      @relation(fields: [carte_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cout_mana     Int

  @@id([competence_id, carte_id])
}

model CapacitePassive {
  id            Int        @id @default(autoincrement())
  competence_id Int
  competence    Competence @relation(fields: [competence_id], references: [id])
  carte         Carte[]
}

model Condition {
  id          Int    @id @default(autoincrement())
  nom         String
  description String
  type_id     Int
  type        Type   @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classe_id   Int
  classe      Classe @relation(fields: [classe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Carte {
  id                    Int                      @id @default(autoincrement())
  nom                   String
  illustration          String
  puissance             Int
  type_id               Int
  type                  Type                     @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classe_id             Int
  classe                Classe                   @relation(fields: [classe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  competences_active    CartesCapacictesActive[]
  competence_passive_id Int
  competence_passive    CapacitePassive          @relation(fields: [competence_passive_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
